

(********************************************************************
	@name Coq declarations for metamodel: <Class>
	@date 2021/10/14 12:32:08
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import String.
Require Import Bool.
Require Import List.      (* sequence *)
Require Import Multiset.  (* bag *)
Require Import ListSet.   (* set *)
Require Import EqNat.
Require Import Coq.Logic.Eqdep_dec.

Require Import core.EqDec.
Require Import core.utils.Utils.
Require Import core.Metamodel.
Require Import core.modeling.ModelingMetamodel.
Require Import core.Model.
Require Import core.utils.CpdtTactics.

(* Base types *)
Inductive Class : Set :=
  BuildClass :
  (* id *) nat ->
  (* name *) string ->
  Class.
  
Inductive Attribute : Set :=
  BuildAttribute :
  (* id *) nat ->
  (* multiValued *) bool ->
  (* name *) string ->
  Attribute.
  

Inductive ClassAttributes : Set :=
   BuildClassAttributes :
   Class ->
   list Attribute ->
   ClassAttributes.

Definition maybeBuildClassAttributes (cl_arg: Class) (at_arg: option (list Attribute)) : option ClassAttributes :=
  match cl_arg, at_arg with
  | cl_arg_succ, Some at_arg_succ => Some (BuildClassAttributes cl_arg_succ at_arg_succ)
  | _, _ => None
  end.

Inductive AttributeType : Set :=
   BuildAttributeType :
   Attribute ->
   Class ->
   AttributeType.

Definition maybeBuildAttributeType (at_arg: Attribute) (ty_arg: option (Class)) : option AttributeType :=
  match at_arg, ty_arg with
  | at_arg_succ, Some ty_arg_succ => Some (BuildAttributeType at_arg_succ ty_arg_succ)
  | _, _ => None
  end.



(* Accessors *)
Definition Class_getId (c : Class) : nat :=
  match c with BuildClass  id name  => id end.
Definition Class_getName (c : Class) : string :=
  match c with BuildClass  id name  => name end.
 
Definition Attribute_getId (a : Attribute) : nat :=
  match a with BuildAttribute  id multiValued name  => id end.
Definition Attribute_getMultiValued (a : Attribute) : bool :=
  match a with BuildAttribute  id multiValued name  => multiValued end.
Definition Attribute_getName (a : Attribute) : string :=
  match a with BuildAttribute  id multiValued name  => name end.
 

Definition beq_Class (cl_arg1 : Class) (cl_arg2 : Class) : bool :=
( beq_nat (Class_getId cl_arg1) (Class_getId cl_arg2) ) && 
( beq_string (Class_getName cl_arg1) (Class_getName cl_arg2) )
.

Definition beq_Attribute (at_arg1 : Attribute) (at_arg2 : Attribute) : bool :=
( beq_nat (Attribute_getId at_arg1) (Attribute_getId at_arg2) ) && 
( beq_bool (Attribute_getMultiValued at_arg1) (Attribute_getMultiValued at_arg2) ) && 
( beq_string (Attribute_getName at_arg1) (Attribute_getName at_arg2) )
.


(* Meta-types *)	
Inductive ClassMetamodel_Class : Set :=
  | ClassClass
  | AttributeClass
.

Definition ClassMetamodel_getTypeByClass (clcl_arg : ClassMetamodel_Class) : Set :=
  match clcl_arg with
    | ClassClass => Class
    | AttributeClass => Attribute
  end.	

Inductive ClassMetamodel_Reference : Set :=
| ClassAttributesReference
| AttributeTypeReference
.

Definition ClassMetamodel_getTypeByReference (clre_arg : ClassMetamodel_Reference) : Set :=
  match clre_arg with
| ClassAttributesReference => ClassAttributes
| AttributeTypeReference => AttributeType
  end.

Definition ClassMetamodel_getERoleTypesByEReference (clre_arg : ClassMetamodel_Reference) : Set :=
  match clre_arg with
| ClassAttributesReference => (Class * list Attribute)
| AttributeTypeReference => (Attribute * Class)
  end.

(* Generic types *)			
Inductive ClassMetamodel_Object : Set :=
 | Build_ClassMetamodel_Object : 
    forall (clcl_arg: ClassMetamodel_Class), (ClassMetamodel_getTypeByClass clcl_arg) -> ClassMetamodel_Object.

Definition beq_ClassMetamodel_Object (c1 : ClassMetamodel_Object) (c2 : ClassMetamodel_Object) : bool :=
  match c1, c2 with
  | Build_ClassMetamodel_Object ClassClass o1, Build_ClassMetamodel_Object ClassClass o2 => beq_Class o1 o2
  | Build_ClassMetamodel_Object AttributeClass o1, Build_ClassMetamodel_Object AttributeClass o2 => beq_Attribute o1 o2
  | _, _ => false
  end.

Inductive ClassMetamodel_Link : Set :=
 | Build_ClassMetamodel_Link : 
    forall (clre_arg:ClassMetamodel_Reference), (ClassMetamodel_getTypeByReference clre_arg) -> ClassMetamodel_Link.

(* TODO *)
Definition beq_ClassMetamodel_Link (l1 : ClassMetamodel_Link) (l2 : ClassMetamodel_Link) : bool := true.

(* Reflective functions *)
Lemma ClassMetamodel_eqEClass_dec : 
 forall (clcl_arg1:ClassMetamodel_Class) (clcl_arg2:ClassMetamodel_Class), { clcl_arg1 = clcl_arg2 } + { clcl_arg1 <> clcl_arg2 }.
Proof. repeat decide equality. Defined.

Lemma ClassMetamodel_eqEReference_dec : 
 forall (clre_arg1:ClassMetamodel_Reference) (clre_arg2:ClassMetamodel_Reference), { clre_arg1 = clre_arg2 } + { clre_arg1 <> clre_arg2 }.
Proof. repeat decide equality. Defined.

Definition ClassMetamodel_getEClass (clob_arg : ClassMetamodel_Object) : ClassMetamodel_Class :=
   match clob_arg with
  | (Build_ClassMetamodel_Object clob_arg _) => clob_arg
   end.

Definition ClassMetamodel_getEReference (clli_arg : ClassMetamodel_Link) : ClassMetamodel_Reference :=
   match clli_arg with
  | (Build_ClassMetamodel_Link clli_arg _) => clli_arg
   end.

Definition ClassMetamodel_instanceOfEClass (clcl_arg: ClassMetamodel_Class) (clob_arg : ClassMetamodel_Object): bool :=
  if ClassMetamodel_eqEClass_dec (ClassMetamodel_getEClass clob_arg) clcl_arg then true else false.

Definition ClassMetamodel_instanceOfEReference (clre_arg: ClassMetamodel_Reference) (clli_arg : ClassMetamodel_Link): bool :=
  if ClassMetamodel_eqEReference_dec (ClassMetamodel_getEReference clli_arg) clre_arg then true else false.


Definition ClassMetamodel_toClass (clcl_arg : ClassMetamodel_Class) (clob_arg : ClassMetamodel_Object) : option (ClassMetamodel_getTypeByClass clcl_arg).
Proof.
  destruct clob_arg as [arg1 arg2].
  destruct (ClassMetamodel_eqEClass_dec arg1 clcl_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition ClassMetamodel_toReference (clre_arg : ClassMetamodel_Reference) (clli_arg : ClassMetamodel_Link) : option (ClassMetamodel_getTypeByReference clre_arg).
Proof.
  destruct clli_arg as [arg1 arg2].
  destruct (ClassMetamodel_eqEReference_dec arg1 clre_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

(* Generic functions *)
Definition ClassModel := Model ClassMetamodel_Object ClassMetamodel_Link.

Definition ClassMetamodel_toObject (clcl_arg: ClassMetamodel_Class) (t: ClassMetamodel_getTypeByClass clcl_arg) : ClassMetamodel_Object :=
  (Build_ClassMetamodel_Object clcl_arg t).

Definition ClassMetamodel_toLink (clre_arg: ClassMetamodel_Reference) (t: ClassMetamodel_getTypeByReference clre_arg) : ClassMetamodel_Link :=
  (Build_ClassMetamodel_Link clre_arg t).




Fixpoint Class_getAttributesOnLinks (cl_arg : Class) (l : list ClassMetamodel_Link) : option (list Attribute) :=
match l with
| (Build_ClassMetamodel_Link ClassAttributesReference (BuildClassAttributes Class_ctr attributes_ctr)) :: l' => 
	  if beq_Class Class_ctr cl_arg then Some attributes_ctr else Class_getAttributesOnLinks cl_arg l'
| _ :: l' => Class_getAttributesOnLinks cl_arg l'
| nil => None
end.

Definition Class_getAttributes (cl_arg : Class) (m : ClassModel) : option (list Attribute) :=
  Class_getAttributesOnLinks cl_arg (@allModelLinks _ _ m).
  
Definition Class_getAttributesObjects (cl_arg : Class) (m : ClassModel) : option (list ClassMetamodel_Object) :=
  match Class_getAttributes cl_arg m with
  | Some l => Some (map (ClassMetamodel_toObject AttributeClass) l)
  | _ => None
  end.

Fixpoint Attribute_getTypeOnLinks (at_arg : Attribute) (l : list ClassMetamodel_Link) : option (Class) :=
match l with
| (Build_ClassMetamodel_Link AttributeTypeReference (BuildAttributeType Attribute_ctr type_ctr)) :: l' => 
	  if beq_Attribute Attribute_ctr at_arg then Some type_ctr else Attribute_getTypeOnLinks at_arg l'
| _ :: l' => Attribute_getTypeOnLinks at_arg l'
| nil => None
end.

Definition Attribute_getType (at_arg : Attribute) (m : ClassModel) : option (Class) :=
  Attribute_getTypeOnLinks at_arg (@allModelLinks _ _ m).
  
Definition Attribute_getTypeObject (at_arg : Attribute) (m : ClassModel) : option (ClassMetamodel_Object) :=
  match Attribute_getType at_arg m with
  | Some cl_arg => Some (ClassMetamodel_toObject ClassClass cl_arg) 
  | _ => None
  end.


(* Typeclass Instances *)	
Instance ClassMetamodel_ElementSum : Sum ClassMetamodel_Object ClassMetamodel_Class :=
{
	denoteSubType := ClassMetamodel_getTypeByClass;
	toSubType := ClassMetamodel_toClass;
	toSumType := ClassMetamodel_toObject;
}.

Instance ClassMetamodel_LinkSum : Sum ClassMetamodel_Link ClassMetamodel_Reference :=
{
	denoteSubType := ClassMetamodel_getTypeByReference;
	toSubType := ClassMetamodel_toReference;
	toSumType := ClassMetamodel_toLink;
}.

Instance ClassMetamodel_EqDec : EqDec ClassMetamodel_Object := {
    eq_b := beq_ClassMetamodel_Object;
}.

Instance ClassMetamodel_Metamodel_instance : 
	Metamodel :=
{
	ModelElement := ClassMetamodel_Object;
	ModelLink := ClassMetamodel_Link;
}.

Instance ClassMetamodel_ModelingMetamodel_instance : 
	ModelingMetamodel ClassMetamodel_Metamodel_instance :=
{ 
    elements := ClassMetamodel_ElementSum;
    links := ClassMetamodel_LinkSum; 
}.

(* Useful lemmas *)

Lemma Class_invert : 
  forall (clcl_arg: ClassMetamodel_Class) (t1 t2: ClassMetamodel_getTypeByClass clcl_arg), 
    Build_ClassMetamodel_Object clcl_arg t1 = Build_ClassMetamodel_Object clcl_arg t2 -> t1 = t2.
Admitted.
