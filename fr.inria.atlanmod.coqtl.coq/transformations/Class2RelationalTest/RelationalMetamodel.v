

(********************************************************************
	@name Coq declarations for metamodel: <Relational>
	@date 2021/10/14 12:32:06
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import String.
Require Import Bool.
Require Import List.      (* sequence *)
Require Import Multiset.  (* bag *)
Require Import ListSet.   (* set *)
Require Import EqNat.
Require Import Coq.Logic.Eqdep_dec.

Require Import core.EqDec.
Require Import core.utils.Utils.
Require Import core.Metamodel.
Require Import core.modeling.ModelingMetamodel.
Require Import core.Model.
Require Import core.utils.CpdtTactics.

(* Base types *)
Inductive Table : Set :=
  BuildTable :
  (* id *) nat ->
  (* name *) string ->
  Table.
  
Inductive Column : Set :=
  BuildColumn :
  (* id *) nat ->
  (* name *) string ->
  Column.
  

Inductive TableColumns : Set :=
   BuildTableColumns :
   Table ->
   list Column ->
   TableColumns.

Definition maybeBuildTableColumns (ta_arg: Table) (co_arg: option (list Column)) : option TableColumns :=
  match ta_arg, co_arg with
  | ta_arg_succ, Some co_arg_succ => Some (BuildTableColumns ta_arg_succ co_arg_succ)
  | _, _ => None
  end.

Inductive ColumnReference : Set :=
   BuildColumnReference :
   Column ->
   Table ->
   ColumnReference.

Definition maybeBuildColumnReference (co_arg: Column) (re_arg: option (Table)) : option ColumnReference :=
  match co_arg, re_arg with
  | co_arg_succ, Some re_arg_succ => Some (BuildColumnReference co_arg_succ re_arg_succ)
  | _, _ => None
  end.



(* Accessors *)
Definition Table_getId (t : Table) : nat :=
  match t with BuildTable  id name  => id end.
Definition Table_getName (t : Table) : string :=
  match t with BuildTable  id name  => name end.
 
Definition Column_getId (c : Column) : nat :=
  match c with BuildColumn  id name  => id end.
Definition Column_getName (c : Column) : string :=
  match c with BuildColumn  id name  => name end.
 

Definition beq_Table (ta_arg1 : Table) (ta_arg2 : Table) : bool :=
( beq_nat (Table_getId ta_arg1) (Table_getId ta_arg2) ) && 
( beq_string (Table_getName ta_arg1) (Table_getName ta_arg2) )
.

Definition beq_Column (co_arg1 : Column) (co_arg2 : Column) : bool :=
( beq_nat (Column_getId co_arg1) (Column_getId co_arg2) ) && 
( beq_string (Column_getName co_arg1) (Column_getName co_arg2) )
.


(* Meta-types *)	
Inductive RelationalMetamodel_Class : Set :=
  | TableClass
  | ColumnClass
.

Definition RelationalMetamodel_getTypeByClass (recl_arg : RelationalMetamodel_Class) : Set :=
  match recl_arg with
    | TableClass => Table
    | ColumnClass => Column
  end.	

Inductive RelationalMetamodel_Reference : Set :=
| TableColumnsReference
| ColumnReferenceReference
.

Definition RelationalMetamodel_getTypeByReference (rere_arg : RelationalMetamodel_Reference) : Set :=
  match rere_arg with
| TableColumnsReference => TableColumns
| ColumnReferenceReference => ColumnReference
  end.

Definition RelationalMetamodel_getERoleTypesByEReference (rere_arg : RelationalMetamodel_Reference) : Set :=
  match rere_arg with
| TableColumnsReference => (Table * list Column)
| ColumnReferenceReference => (Column * Table)
  end.

(* Generic types *)			
Inductive RelationalMetamodel_Object : Set :=
 | Build_RelationalMetamodel_Object : 
    forall (recl_arg: RelationalMetamodel_Class), (RelationalMetamodel_getTypeByClass recl_arg) -> RelationalMetamodel_Object.

Definition beq_RelationalMetamodel_Object (c1 : RelationalMetamodel_Object) (c2 : RelationalMetamodel_Object) : bool :=
  match c1, c2 with
  | Build_RelationalMetamodel_Object TableClass o1, Build_RelationalMetamodel_Object TableClass o2 => beq_Table o1 o2
  | Build_RelationalMetamodel_Object ColumnClass o1, Build_RelationalMetamodel_Object ColumnClass o2 => beq_Column o1 o2
  | _, _ => false
  end.

Inductive RelationalMetamodel_Link : Set :=
 | Build_RelationalMetamodel_Link : 
    forall (rere_arg:RelationalMetamodel_Reference), (RelationalMetamodel_getTypeByReference rere_arg) -> RelationalMetamodel_Link.

(* TODO *)
Definition beq_RelationalMetamodel_Link (l1 : RelationalMetamodel_Link) (l2 : RelationalMetamodel_Link) : bool := true.

(* Reflective functions *)
Lemma RelationalMetamodel_eqEClass_dec : 
 forall (recl_arg1:RelationalMetamodel_Class) (recl_arg2:RelationalMetamodel_Class), { recl_arg1 = recl_arg2 } + { recl_arg1 <> recl_arg2 }.
Proof. repeat decide equality. Defined.

Lemma RelationalMetamodel_eqEReference_dec : 
 forall (rere_arg1:RelationalMetamodel_Reference) (rere_arg2:RelationalMetamodel_Reference), { rere_arg1 = rere_arg2 } + { rere_arg1 <> rere_arg2 }.
Proof. repeat decide equality. Defined.

Definition RelationalMetamodel_getEClass (reob_arg : RelationalMetamodel_Object) : RelationalMetamodel_Class :=
   match reob_arg with
  | (Build_RelationalMetamodel_Object reob_arg _) => reob_arg
   end.

Definition RelationalMetamodel_getEReference (reli_arg : RelationalMetamodel_Link) : RelationalMetamodel_Reference :=
   match reli_arg with
  | (Build_RelationalMetamodel_Link reli_arg _) => reli_arg
   end.

Definition RelationalMetamodel_instanceOfEClass (recl_arg: RelationalMetamodel_Class) (reob_arg : RelationalMetamodel_Object): bool :=
  if RelationalMetamodel_eqEClass_dec (RelationalMetamodel_getEClass reob_arg) recl_arg then true else false.

Definition RelationalMetamodel_instanceOfEReference (rere_arg: RelationalMetamodel_Reference) (reli_arg : RelationalMetamodel_Link): bool :=
  if RelationalMetamodel_eqEReference_dec (RelationalMetamodel_getEReference reli_arg) rere_arg then true else false.


Definition RelationalMetamodel_toClass (recl_arg : RelationalMetamodel_Class) (reob_arg : RelationalMetamodel_Object) : option (RelationalMetamodel_getTypeByClass recl_arg).
Proof.
  destruct reob_arg as [arg1 arg2].
  destruct (RelationalMetamodel_eqEClass_dec arg1 recl_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition RelationalMetamodel_toReference (rere_arg : RelationalMetamodel_Reference) (reli_arg : RelationalMetamodel_Link) : option (RelationalMetamodel_getTypeByReference rere_arg).
Proof.
  destruct reli_arg as [arg1 arg2].
  destruct (RelationalMetamodel_eqEReference_dec arg1 rere_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

(* Generic functions *)
Definition RelationalModel := Model RelationalMetamodel_Object RelationalMetamodel_Link.

Definition RelationalMetamodel_toObject (recl_arg: RelationalMetamodel_Class) (t: RelationalMetamodel_getTypeByClass recl_arg) : RelationalMetamodel_Object :=
  (Build_RelationalMetamodel_Object recl_arg t).

Definition RelationalMetamodel_toLink (rere_arg: RelationalMetamodel_Reference) (t: RelationalMetamodel_getTypeByReference rere_arg) : RelationalMetamodel_Link :=
  (Build_RelationalMetamodel_Link rere_arg t).




Fixpoint Table_getColumnsOnLinks (ta_arg : Table) (l : list RelationalMetamodel_Link) : option (list Column) :=
match l with
| (Build_RelationalMetamodel_Link TableColumnsReference (BuildTableColumns Table_ctr columns_ctr)) :: l' => 
	  if beq_Table Table_ctr ta_arg then Some columns_ctr else Table_getColumnsOnLinks ta_arg l'
| _ :: l' => Table_getColumnsOnLinks ta_arg l'
| nil => None
end.

Definition Table_getColumns (ta_arg : Table) (m : RelationalModel) : option (list Column) :=
  Table_getColumnsOnLinks ta_arg (@allModelLinks _ _ m).
  
Definition Table_getColumnsObjects (ta_arg : Table) (m : RelationalModel) : option (list RelationalMetamodel_Object) :=
  match Table_getColumns ta_arg m with
  | Some l => Some (map (RelationalMetamodel_toObject ColumnClass) l)
  | _ => None
  end.

Fixpoint Column_getReferenceOnLinks (co_arg : Column) (l : list RelationalMetamodel_Link) : option (Table) :=
match l with
| (Build_RelationalMetamodel_Link ColumnReferenceReference (BuildColumnReference Column_ctr reference_ctr)) :: l' => 
	  if beq_Column Column_ctr co_arg then Some reference_ctr else Column_getReferenceOnLinks co_arg l'
| _ :: l' => Column_getReferenceOnLinks co_arg l'
| nil => None
end.

Definition Column_getReference (co_arg : Column) (m : RelationalModel) : option (Table) :=
  Column_getReferenceOnLinks co_arg (@allModelLinks _ _ m).
  
Definition Column_getReferenceObject (co_arg : Column) (m : RelationalModel) : option (RelationalMetamodel_Object) :=
  match Column_getReference co_arg m with
  | Some ta_arg => Some (RelationalMetamodel_toObject TableClass ta_arg) 
  | _ => None
  end.


(* Typeclass Instances *)	
Instance RelationalMetamodel_ElementSum : Sum RelationalMetamodel_Object RelationalMetamodel_Class :=
{
	denoteSubType := RelationalMetamodel_getTypeByClass;
	toSubType := RelationalMetamodel_toClass;
	toSumType := RelationalMetamodel_toObject;
}.

Instance RelationalMetamodel_LinkSum : Sum RelationalMetamodel_Link RelationalMetamodel_Reference :=
{
	denoteSubType := RelationalMetamodel_getTypeByReference;
	toSubType := RelationalMetamodel_toReference;
	toSumType := RelationalMetamodel_toLink;
}.

Instance RelationalMetamodel_EqDec : EqDec RelationalMetamodel_Object := {
    eq_b := beq_RelationalMetamodel_Object;
}.

Instance RelationalMetamodel_Metamodel_instance : 
	Metamodel :=
{
	ModelElement := RelationalMetamodel_Object;
	ModelLink := RelationalMetamodel_Link;
}.

Instance RelationalMetamodel_ModelingMetamodel_instance : 
	ModelingMetamodel RelationalMetamodel_Metamodel_instance :=
{ 
    elements := RelationalMetamodel_ElementSum;
    links := RelationalMetamodel_LinkSum; 
}.

(* Useful lemmas *)

Lemma Relational_invert : 
  forall (recl_arg: RelationalMetamodel_Class) (t1 t2: RelationalMetamodel_getTypeByClass recl_arg), 
    Build_RelationalMetamodel_Object recl_arg t1 = Build_RelationalMetamodel_Object recl_arg t2 -> t1 = t2.
Admitted.
